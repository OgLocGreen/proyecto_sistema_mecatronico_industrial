In diesem Kapitel wird auf die Software für den Rover eingegangen. 
Auf die verschiedenen Funktionen und Eigenschaften der Software. 
Es wird auch auf die Kommunikation der verschiedenen Komponenten und Baugruppen eingegangen.
Zu dem werden die verschiednen Schnittstellen und Variablen erklärt,
 welche für das Projekt nötig waren.
Zur Software selbst werden zum Schluss noch die einzelnen Klassen kurz erklärt. 
Wenn es nötig ist, werden auch einzelne Funktionen erklärt.
Somit Folgen nun Folgende Unterkapitel 
1. Programmierumgebung
2. Struktureller Aufbau der Kommunikation
3. Aufbau der Schnittstellen und Variablen innerhalb des Rovers und der andern Baugruppe
4. Struktureller Aufbau der Software der einzelnen Baugruppen
5. Erklärung der einzelnen Klassen

1. Programmierumgebung
Für die Software wurde die Entscheidung getroffen, dass wir das der BeagleBoneBlack im Mittel Punkt des ganzen Projekts steht.
Zu dem wurde zu Beginn direkt wichtige Eckpunkte zur Entwickelung der Software beschlossen. 
Dazu gehört mich, welchen Programmierumgebungen gearbeitet wird, diese sind tabellarisch in Bild 1 - Programmierumgebungen zu sehen.
Dies ist vor allem dafür wichtig, dass es während des Arbeitens keine Probleme auftauchen.

2. Struktureller Aufbau der Kommunikation
Für die Kommunikation wurden zwei verschiedene Optionen gewählt, welche parallel zueinander Ablaufen.

2.1. Kommunikation für Daten
Für die Kommunikation von Daten, welche zwischen den Baugruppen ausgetauscht werden müssen, wurde ein TCP-Server verwendet.
Diese Verbindung wird mit einem Websocket gemanagt.
Somit müssen keine speziellen Nachrichten gesendet werden, da alle dauerhaft verbunden sind und alle die gleichen Nachrichten erhaltne (Broadcast).
Der Server läuft auf dem BeagleBoneBlack und ist für die Kommunikation mit den anderen Baugruppen zuständig. Dies ist in Bild 2 - Kommunikation zu sehen. 
Der Computer, Esp32_top, Esp32_front und Mando sind alle Clients, welche sich mit dem Server verbinden.
Sobald daten an einer Stelle geändert werden, werden diese an den Server gesendet und dieser wird dann diese Daten an die anderen Clients weiterleitet.

2.2 Kommunikation für Video
Die Kommunikation der Videodaten wird nur einseitig ablaufen. 
Heißt die jeweiligen Esps machen einen eigenen Webservers auf. 
Über diesen Webserver Streamen sie dann ihre Videos auf eine spezielle IP-Adresse.
Diese Videodaten können dann von den jeweiligen Clienten (GUI und Mando) , welche das Video brauchen, gestreamt werden.
Dies ist Bild 3 - Kommunikation Video zu sehen.

3. Aufbau der Schnittstellen und Variablen innerhalb des Rovers und der andern Baugruppe
dieses Unterkapitel dient noch einmal zur Übersicht des Rovers mit der einzelnen Sensoren und Aktoren und Baugruppen.
Die schematische Abbildung des Rovers ist in Bild 4 - schematischer Aufbau des Rovers zu sehen.
Hier ist einfach zu erkennen, wo welche Variablen sich befinden und welche Schnittstellen und Kommunikation Protokolle verwendet werden.
Dieser schematische Aufbau der Komponenten und Variablen hat das Arbeiten im Team deutlich vereinfachen.

4. Struktureller Aufbau der Software der einzelnen Baugruppen
4.1 Struktureller Aufbau der Software BBB
Da wir den BeagleBone als Server ausgewählt haben, wird hier die meiste Arbeit verrichtet.
Heißt der BeagleBone übernimmt die Komunication und die Verarbeitung der Daten.
Desweitern haben wir uns für ein Eventbasierten Ablauf entschieden, da die verschiednen Baugruppen und Komunication vereinfacht.
Heißt für jede Action wird ein Event ausgelöst in welchem dann die Action bearbeitet wird. 
Dies ist in Abbildung 5 - Event Ablauf BBB zu sehen.
Somit haben wir Beispielsweise ein Zeit gesteuertes Event für die Verarbeitung der Sensor Signalen und Actoren, 
ein zweit getacktetes event für das Brodcasten der Nachriten. 
Auf alle einzelnen Events wird nun genauer eingangen:
1. Event Sensoren
Dieses Event ist Zeit gesteuert. Wenn das TimerEvent ausgelöst wird werden alle Sensoren nacheinander abgefragt.
Zu diesen Sensoren gehören der Light Sensor, der Temperatur Sensor, der Ultraschall Sensor.
Anschließend werden die Daten in die Datenclasse übergeben.
2. Event Actoren
Dieses Event ist auch Zeit gesteuert. Wenn das TimerEvent ausgelöst wird werden alle Actoren nacheinander angesteuert. 
Zu den Actoren gehören Led, Ventilator, Lautsprecher.
Anschließend werden die Daten in die Datenclasse übergeben.
3. Event Comunication
Diese Events werden immer ausgelösst wenn ein Client versucht mit unserem Server zu interagieren.
3.1 Event OnConnectionRequest()
Wenn ein Client versucht sich mit dem Server zu verbinden, wird dieses Event ausgelöst.
Dann wird der Client in unsere liste von Socket verbindungen aufgenommen.
3.2 Event OnDataReceived()
Wenn ein Client Daten an den Server sendet, wird dieses Event ausgelöst.
Dann werden die Daten in die Datenclasse übergeben und die Daten dann auch an die weitern Module wie FPGA oder Trajectory weiter gegeben.
3.3 Event OnSendData()
Dises Event ist zum Senden an alle Clients gedacht.
Man kann verschiedene Nachrichten an alle Clients senden.
In unserem Fall wird über dieses Event die Log_datei und die Config_datei an alle Clients gesendet.
3.4 Event OnDisconnected()
Wenn ein Client sich vom Server trennt, wird dieses Event ausgelöst.
Dann wird der Client aus unserer Liste von Socket verbindungen entfernt.

4 Event Loggen
Die grund Funktion ist recht einfach.
Die gesamte Logg Nachricht wird in einer Zeile geschrieben.
Es wird immer zu erst die Uhrzeit und dann das Datum geschrieben.
Anschließend wird die Nachricht geschrieben.
Die Nachricht soll kurz beschreiben was passiert.
Folgende Nachrichten werden geloggt:
- Client hat sich mit dem Server verbunden
- Client hat sich vom Server getrennt
- Room_light turned on/off with the room_name
- Alarm turned on/off
- pusher activated

4.2 Struktureller Aufbau der Software Esp32_top
4.3 Struktureller Aufbau der Software Esp32_front
4.4 Struktureller Aufbau der Software Mando
4.5 Struktureller Aufbau der Software GUI

5. Erklärung der einzelnen Klassen
5.1 Klasse BeagleBoneBlack
5.2 Klasse Utility
5.3 Klasse Connection
5.4 Klasse ControllAndMeasure
5.5 Klasse Data
5.6 Klasse MotorDriver
5.7 Klasse Trajectory
5.8 Klasse FPGA
